class Solution {private:	int sumCount;	priority_queue<double, vector<double>, greater<double>>minHeap;	priority_queue<double, vector<double>, less<double>>maxHeap;public:    void Insert(int num) {        if( ( sumCount & 0x01 )!= 1 ) {			if( maxHeap.size() > 0 && num <= maxHeap.top() ) {				maxHeap.push( num );				minHeap.push( maxHeap.top() );				maxHeap.pop();			}			else				minHeap.push( num );			++sumCount;		}		else {			if( minHeap.size() > 0 && num >= minHeap.top() ) {				minHeap.push( num );				maxHeap.push( minHeap.top() );				minHeap.pop();			}			else 				maxHeap.push( num );			++sumCount;		}			    }    double GetMedian() { 		if( sumCount == 0 )			return 0;		else if( ( sumCount & 0x01 ) != 1 )			return ( maxHeap.top() + minHeap.top() ) / 2 ;		else return minHeap.top();		    }};